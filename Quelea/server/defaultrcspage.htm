<!DOCTYPE html>
<html>
<head>
    <title>Quelea Remote Control</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <style type="text/css">
            body {
                font-family: 'DejaVu Sans',sans-serif;
                width: 100%;
                text-align: center;
                margin: 0;
            }

            .toggleButton {
                width: 5em;
                height: 5em;
                margin-right: 2em;
                -webkit-border-radius: 50%;
                -moz-border-radius: 50%;
                border-radius: 50%;
                -webkit-box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                -moz-box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                position: sticky;
                background-repeat: no-repeat;
                background-position: center;
                background-size: contain;
                background-color: #dfdfdf;
            }

            .navButton {
                margin-bottom: 10px;
                width: 1.2em;
                max-width: 150px;
                max-height: none;
                background-color: #dfdfdf;
                -webkit-box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                -moz-box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.52);
                -webkit-border-radius: 10%;
                -moz-border-radius: 0;
                border-radius: 10%;
                font-size: 3em;
                text-align: center;
            }

            .navButtonContainer {
                position: fixed;
                width: 3em;
                right: 0;
                margin-right: 2em;
                text-align: right;
                margin-top:25vh;
                padding-bottom:4vh;
            }

            .toggleButtonContainer {
                position: fixed;
                padding-top: 1em;
                padding-bottom: 1em;
                margin-top: 4em;
                width: 100%;
                height: auto;
                text-align: center;
                background-color: white;
            }

            .slideButton {
                height: 20vh;
            }

            .itemButton {
                height: 13vh;
            }

            .unselected {
                border: solid 1em #dfdfdf;
            }

            .active {
                border: solid 1em #777777;
            }

            .smallbutton {
                border:1px solid #cacaca;
                -webkit-border-radius: 10px;
                -moz-border-radius: 10px;
                border-radius: 8px;
                min-height: 40px;
                max-height: 40px;
                min-width: 80px;
                max-width: 150px;
                margin: 5px;
                margin-left:auto;
                padding: 0px;
                font-size:1em;
                vertical-align: middle;
                color: black;
            }

            #center {
                margin-top: 10em;
                text-align: center;
                display: block;
                width: 60%;
                margin-left:auto;
                margin-right:auto;
                height: auto;
                padding-bottom: 6em;
            }

            #lyrics {
                display: inline-block;
                font-size: 1em;
            }

            a {
                color: black;
                text-decoration: none;
            }

            a:active {
                color: black;
            }

            a:hover {
                text-decoration: underline;

            }

            a:visited {
                color: black;
            }

            .inner {
                padding-top: 20px;
                padding-bottom: 20px;
            }

            iframe {
                border: none;
            }

            #logout {
                text-align: right;
                position: fixed;
                margin-bottom: 20px;
            }

            #logout button {
                text-align:center;
                width:25%;
                height:20%;
                min-height: 100px;
                min-width: 100px;
                max-width: 200px;
                margin-top: 25px;
                margin: 10px;
                margin-left:auto;
                padding: 0px;
                font-size: 2em;
            }

            .empty {
                font-size: 100%;
                cursor: pointer;
                margin: 0px;
            }

            #slider {
                width:500px;
                top:100px;
                position:absolute;
                z-index:2;
            }

            #scheduleHeader {
                width:18em;
                height:100%;
                position:absolute;
                left:0;
            }

            #scheduleHeader h3 {
                background-color:#111111;
                height: auto;
                color: white;
                margin: 0;
                padding: 1.1em;
            }

            #sidebar {
                position:absolute;
                top:180px;
                left:18px;
            }

            #sidebar1 {
                position:absolute;
                top:180px;
                left:18px;
            }

            #schedule {
                text-align: left;
                height: auto;
                overflow: auto;
            }

            #searcharea {
                text-align: left;
                height: 200px;
                overflow: auto;
            }

            .title {
				color: #ff4141;
			}

            .drawer {
              height: 100vh;
              width: 0px;
              box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
              position: fixed;
              z-index: 1;
              top: 0;
              left: 0;
              background-color: #fff;
              overflow-x: hidden;
              transition: 0.5s;
            }

            #drawerButtonContainer {
                transition: 0.5s;
                position: fixed;
                text-align: right;
                margin-left: 1em;
                left: 0;
            }

            #drawerButtonContainer span {
                transition: 0.5s;
            }

            #searchBox {
                transition: 0.5s;
                z-index: 2;
            }

            #titlebar {
                width: 100%;
                height: 4em;
                background: #111111;
                text-align: left;
                position: fixed;
            }

            .titlebarIcons {
                color: white;
                font-size: 3em;
                cursor: pointer;
                text-align: left;
            }

            #actionButtonContainer {
                position: absolute;
                text-align: right;
                margin-right: 1em;
                right: 0;
                transition: 0.5s;
            }

            #resultList {
				position: fixed;
                text-align: right;
                margin-right: 1em;
                right: 0;
                top:4em;
                width: 16em;
                background: white;
                visibility: hidden;
                padding: 1em;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
                z-index: 1;
			}

            .scheduleItem {
                font-size: 1em;
                padding: 20px 0 20px 18px;
                margin: 0;
                background-color: #fff;
            }

            .current {
                font-weight: bold;
                background: #90CAF9;
            }

            .preview {
                background: #E0E0E0;
            }

            #schedule>hr {
                margin: 0;
                padding: 0;
            }

            #suggestions {
				z-index: 3;
				box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
				width: 16em;
				padding: 0.02em;
				position: fixed;
				top: 4em;
				right: 1em;
				background: white;
				visibility: hidden;
			}

			#suggestions p:hover {
				color:grey;
			}

			#songResults {
			    width:16em;
			    height: 250px;
			}

			#bibleFlex {
			    display:flex;
			    flex-direction: row;
			    justify-content: left;
			    align-items: left;
			}

			@media screen and (max-width: 500px) {
				#center {
					padding-right: 3em;
				}
            }

    </style>
</head>
<body>
<div id="leftDrawer" class="drawer">
    <div id="scheduleHeader">
        <h3>[schedule]</h3>
        <div id="schedule">

        </div>
    </div>
</div>

<div id="titlebar">
    <div id="drawerButtonContainer">
        <span id="drawerIcon" onclick="toggleDrawer()" class="titlebarIcons">&#9776;</span>
    </div>
    <div id="actionButtonContainer">
        <span id="searchIcon" class="titlebarIcons" onclick="toggleSearch()">üîç</span>
        <input id="searchBox" type="text" style="width:0; height:2.5em; display:none;" onkeyup="search()"/>
    </div>
</div>
<div id="mainContent" onclick="closeDrawer()">

    <div class="toggleButtonContainer">
        <button type="button" onclick="logo();" id="logoButton" class="unselected toggleButton"
                style="background-image: url(logo.png);"></button>
        <button type="button" onclick="black();" id="blackButton" class="unselected toggleButton"
                style="background: black;"></button>
        <button type="button" onclick="clears();" id="clearButton" class="unselected toggleButton"
                style="background: white;"></button>
        <br/>
    </div>
    <div class="navButtonContainer">
        <button type="button" onclick="previousItem();" class="navButton itemButton">‚§í</button>
        <br/>
        <button type="button" onclick="previousSlide();" class="navButton slideButton">‚Üë</button>
        <br/>
        <button type="button" onclick="nextSlide();" class="navButton slideButton">‚Üì</button>
        <br/>
        <button type="button" onclick="nextItem();" class="navButton itemButton">‚§ì</button>
        <br/>
    </div>
    &nbsp;
    <div id="center">
        <div id="lyrics">

        </div>
    </div>
</div>
<div id="suggestions">

</div>
<div id="resultList">
    <div style="text-align: left;">
        <p>Song Results</p>
        <embed id="songResults"/>
        <div id="bibleFlex">
            <p style="margin-right:1em;">[bible.version]</p>
            <select id="translations">

            </select>
        </div>
    </div>
    <div>
    </div>
</div>
<script>
            var xmlhttp = new XMLHttpRequest();
            var schhttp = new XMLHttpRequest();
            var biblehttp = new XMLHttpRequest();
            var statushttp = new XMLHttpRequest();
            var lyriccache;
            var statuscache;
            var schedulecache;
            function setup()
            {
                getTranslations();
                setInterval(function () {
                    loadXMLDoc();
                    stateCheck();
                    scheduleCheck();
                }, 400);

                xmlhttp.onreadystatechange = function ()
                {
                    if (xmlhttp.readyState == 4 && xmlhttp.status == 200)
                    {
                        if (lyriccache !== xmlhttp.responseText) {
                            document.getElementById("lyrics").innerHTML = xmlhttp.responseText;
                            lyriccache = xmlhttp.responseText;
                            getSectionTitles();
                        }

                    }
                }
                statushttp.onreadystatechange = function ()
                {
                    if (statushttp.readyState == 4 && statushttp.status == 200)
                    {
                        if (statuscache !== statushttp.responseText) {
                            statuscache = statushttp.responseText;
                            var logo = document.getElementById("logoButton");
                            var black = document.getElementById("blackButton");
                            var clear = document.getElementById("clearButton");

                            var st = statuscache.split(",");
                            if (st[0] === "true") {
                                logo.className = logo.className.replace(/\unselected\b/g, "active");
                            }
                            else {
                                logo.className = logo.className.replace(/\active\b/g, "unselected");
                            }
                            if (st[1] === "true") {
                                black.className = black.className.replace(/\unselected\b/g, "active");
                            }
                            else {
                                black.className = black.className.replace(/\active\b/g, "unselected");
                            }
                            if (st[2] === "true") {
                                clear.className = clear.className.replace(/\unselected\b/g, "active");
                            }
                            else {
                                clear.className = clear.className.replace(/\active\b/g, "unselected");
                            }
                            if (document.getElementById("playbutton") !== null) {
                                document.getElementById("playbutton").innerHTML = st[3];
                            }
                        }
                    }
                }
            }
            window.onload = setup;
            function loadXMLDoc()
            {
                xmlhttp.open("GET", "/lyrics", true);
                xmlhttp.timeout = 4000;
                xmlhttp.ontimeout = function () {
                    document.getElementById("lyrics").innerHTML = "";
                }
                xmlhttp.send();
            }
            function stateCheck()
            {
                statushttp.open("GET", "/status", true);
                statushttp.timeout = 4000;
                statushttp.ontimeout = function () {
                    var logo = document.getElementById("logoButton");
                    logo.className = logo.className.replace(/\active\b/g, "unselected");
                    var black = document.getElementById("blackButton");
                    black.className = black.className.replace(/\active\b/g, "unselected");
                    var clear = document.getElementById("clearButton");
                    clear.className = clear.className.replace(/\active\b/g, "unselected");
                }
                statushttp.send();
            }
            function scheduleCheck()
            {
                schhttp.open("GET", "/schedule", true);
                schhttp.timeout = 4000;
                schhttp.ontimeout = function () {
                    document.getElementById("schedule").innerHTML = "";
                }
                schhttp.onreadystatechange = function ()
                {
                    if (schhttp.readyState == 4 && schhttp.status == 200)
                    {
                        if (schedulecache !== schhttp.responseText) {
                            document.getElementById("schedule").innerHTML = "";
                            var lines = schhttp.responseText.split("<br/>");
                            for (var i = 0; i < lines.length; i++) {
                                var regex = /(<([^>]+)>)/ig;
                                if (lines[i].trim().replace(regex, "") !== "") {
                                    var style = "";
                                    if (lines[i].indexOf('i>') !== -1) {
                                        style = ' preview';
                                        }
                                    if (lines[i].indexOf('b>') !== -1) {
                                        style = ' current';
                                        console.log(lines[i]);
                                        }
                                    document.getElementById("schedule").innerHTML += "<p class='scheduleItem" + style + "'><span onclick='gotoItem(" + i + ")'>" + lines[i] + "</span></p><hr>";
                                }
                            }
                            schedulecache = schhttp.responseText;
                        }

                    }
                }
                schhttp.send();
            }
            function nextSlide() {
                var request = new XMLHttpRequest();
                request.open('GET', '/next', true);
                request.send();
                request = null;
            }
            function previousSlide() {
                var request = new XMLHttpRequest();
                request.open('GET', '/prev', true);
                request.send();
                request = null;
            }
            function nextItem() {
                var request = new XMLHttpRequest();
                request.open('GET', '/nextitem', true);
                request.send();
                request = null;
            }
            function previousItem() {
                var request = new XMLHttpRequest();
                request.open('GET', '/previtem', true);
                request.send();
                request = null;
            }
            function logo() {
                var request = new XMLHttpRequest();
                request.open('GET', '/tlogo', true);
                request.send();
                request = null;
            }
            function black() {
                var request = new XMLHttpRequest();
                request.open('GET', '/black', true);
                request.send();
                request = null;
            }
            function clears() {
                var request = new XMLHttpRequest();
                request.open('GET', '/clear', true);
                request.send();
                request = null;
            }
            function play() {
                var request = new XMLHttpRequest();
                request.open('GET', '/play', true);
                request.send();
                request = null;
            }
            function section(i) {
                var request = new XMLHttpRequest();
                request.open('GET', '/section' + i, true);
                request.send();
                request = null;
            }
            function gotoItem(i) {
                closeDrawer();
                var request = new XMLHttpRequest();
                request.open('GET', '/gotoitem' + i, true);
                request.send();
                request = null;
            }
            function getSectionTitles() {
				var sections = document.getElementsByTagName("p");
				var title;
				var i;
				for (i = 0; i < sections.length; i++) {
					title = sections[i].getAttribute("data-type");
					if (title != null) {
						sections[i].innerHTML = "<div class='title'>" + title + "</div>" + sections[i].innerHTML;
					}
				}
			}
            function toggleDrawer() {
                if (document.getElementById("leftDrawer").style.width !== "18em") {
                    openDrawer();
                } else {
                    closeDrawer();
                }
            }
            function openDrawer() {
                document.getElementById("leftDrawer").style.width = "18em";
                document.getElementById("drawerButtonContainer").style.transform = "translate(18em, 0px)";
                document.getElementById("drawerButtonContainer").style.WebkitTransform = "translate(18em, 0px)";
                document.getElementById("drawerButtonContainer").style.msTransform = "translate(18em, 0px)";
            }
            function closeDrawer() {
                document.getElementById("leftDrawer").style.width = "0px";
                document.getElementById("drawerButtonContainer").style.transform = "translate(0px, 0px)";
                document.getElementById("drawerButtonContainer").style.WebkitTransform = "translate(0px, 0px)";
                document.getElementById("drawerButtonContainer").style.msTransform = "translate(0px, 0px)";
            }
            function toggleSearch(close) {
				var searchBox = document.getElementById("searchBox");
				var searchIcon = document.getElementById("searchIcon");
				var navBarIcon = document.getElementById("drawerIcon");
				var actionButtonContainer = document.getElementById("actionButtonContainer");
				var suggestions = document.getElementById("suggestions");
				var width = "0px";
				if (searchBox.style.width !== "16em" && !close) {
					width = "16em";
					searchBox.style.display = "inline";
					searchIcon.innerHTML = "‚úï";
					resultList.style.visibility = "visible";
				} else {
					searchBox.style.display = "none";
					searchIcon.innerHTML = "üîç";
					resultList.style.visibility = "hidden";
					searchBox.value = "";
					loadSearch("");
					suggestions.style.visibility = "hidden";
				}
                searchBox.style.width = width;
                actionButtonContainer.style.transform = "translate(-" + width/2 +", 0px)";
                actionButtonContainer.style.WebkitTransform = "translate(-" + width/2 + ", 0px)";
                actionButtonContainer.style.msTransform = "translate(-" + width/2 + ", 0px)";
            }
           function search() {
				var searchBox = document.getElementById("searchBox");
				loadSearch("/search/" + searchBox.value);
				getBooks(searchBox.value);
			}

			function getTranslations()
			{
				var xmlhttp=new XMLHttpRequest();
				xmlhttp.onreadystatechange=function()
				{
					if (xmlhttp.readyState==4 && xmlhttp.status==200)
					{
						var lines = xmlhttp.responseText.split("\n");

						for (var i = 0; i < lines.length; i++) {
							if (lines[i].length > 0)
								document.getElementById("translations").innerHTML += "<option value=\""+ lines[i] +"\">"+ lines[i] + "</option>";
						}
						return xmlhttp.responseText;
					}
				}
				xmlhttp.open("GET", "/translations", false);
				xmlhttp.send();
			}
			function getBooks(query)
			{
				var xmlhttp=new XMLHttpRequest();
				xmlhttp.onreadystatechange=function()
				{
					if (xmlhttp.readyState==4 && xmlhttp.status==200)
					{
						var lines = xmlhttp.responseText.split("\n");
						var suggestions = document.getElementById("suggestions");
						suggestions.innerHTML = "";
						suggestions.style.visibility = "hidden";
						for (var i = 0; i < lines.length; i++) {
							if (lines[i].length > 0) {
								if (lines[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) {
									suggestions.style.visibility = "visible";
									suggestions.innerHTML += "<p onclick=\"setSearch('"+ lines[i] +"')\">"+ lines[i] + "</p>";
								} else if (query.indexOf(" ") > 0 && query.match(/([^\x00-\x7F]|\w)+\s\d(:\d+)?(-\d+)?/)) {
									suggestions.style.visibility = "visible";
									suggestions.innerHTML = "<p onclick=\"getMessageFromServer('/addbible/" + document.getElementById("translations").value + "/"+ query.split(/[\s\d]/)[0] + "/" + query.match(/([^\x00-\x7F]|\w)+\s(\d(:\d+)?(-\d+)?)/m)[2] + "');\">[click.to.add]: " + query + "</p>";
								}
							}
						}
						return xmlhttp.responseText;
					}
				}
				xmlhttp.open("GET", "/books/" + document.getElementById("translations").value, false);
				xmlhttp.send();
			}
			function loadSearch(url){
			    var songResults=document.getElementById("songResults");
			    var clone=songResults.cloneNode(true);
			    clone.setAttribute('src',url);
			    songResults.parentNode.replaceChild(clone,songResults)
			}
			function setSearch(query) {
				var searchBox = document.getElementById("searchBox");
				searchBox.value = query;
				document.getElementById("suggestions").style.visibility = "hidden";
				setCaretPosition(query);
			}
			function getMessageFromServer(url)
			{
				document.getElementById("suggestions").style.visibility = "hidden";
				var xmlhttp=new XMLHttpRequest();
				xmlhttp.onreadystatechange=function()
				{
					if (xmlhttp.readyState==4 && xmlhttp.status==200)
					{
						alert(xmlhttp.responseText);
					}
				}
				xmlhttp.open("GET", url, false);
				xmlhttp.send();
				return true;
			}
			function setCaretPosition(query) {
				var elem = document.getElementById("searchBox");
				var caretPos = query.length;
		        elem.focus();
				elem.setSelectionRange(caretPos, caretPos);
			}
</script>
</body>
</html>